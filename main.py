import os
import re
import random
import asyncio
import threading
from concurrent.futures import ThreadPoolExecutor
from flask import Flask, request
from telegram import Update
from telegram.ext import Application as PTBApplication, MessageHandler, filters, ContextTypes

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.environ["BOT_TOKEN"]
WEBHOOK_PATH = "/webhook"
PORT = int(os.environ.get("PORT", 10000))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
if not WEBHOOK_URL:
    raise ValueError("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Environment Variables.")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è PTB –∏ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
application = None
main_loop = None # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞

# === –û–¢–í–ï–¢–´ –ù–ê –•–û–ö–ö–£ ===
HAiku_RESPONSES = [
    "–Ω–∏—Ñ–∏–≥–∞ —Ç—ã —Å–∞–º—É—Ä–∞–π",
    "–≤–æ—Ç —ç—Ç–æ —Ö–æ–∫–∫—É!",
    "—Ç—ã –ø–æ—ç—Ç, –±—Ä–∞—Ç–∏—à–∫–∞",
    "—Å–∞–∫—É—Ä–∞ —Ä–∞—Å—Ü–≤–µ–ª–∞ –≤ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤–∞—Ö",
    "–¥–∞–∂–µ —Ü–∏–∫–∞–¥–∞ –∑–∞–º–æ–ª—á–∞–ª–∞"
]

# === –ü–û–î–°–ß–Å–¢ –°–õ–û–ì–û–í (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π) ===
def count_syllables(word):
    """–ü–æ–¥—Å—á—ë—Ç —Å–ª–æ–≥–æ–≤ –≤ —Å–ª–æ–≤–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –Ω–µ-–±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã."""
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
    word = ''.join(c.lower() for c in word if c.isalpha())
    vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è"
    count = 0
    prev_vowel = False
    for ch in word:
        is_vowel = ch in vowels
        if is_vowel and not prev_vowel:
            count += 1
        prev_vowel = is_vowel
    return max(1, count) # –ú–∏–Ω–∏–º—É–º 1 —Å–ª–æ–≥

# === –ü–û–ò–°–ö –•–û–ö–ö–£ –í –õ–Æ–ë–û–ú –§–û–†–ú–ê–¢–ï (–ì–ò–ë–ö–ê–Ø –í–ï–†–°–ò–Ø –° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø–ú–ò –ò –ü–†–û–í–ï–†–ö–û–ô –°–¢–†–û–ö) ===
def is_haiku(text):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç "—Ö–æ–∫–∫—É" (–∏–º–µ–µ—Ç 17 —Å–ª–æ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ 5-7-5).
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é, –ø—Ä–æ–±–µ–ª—ã, —Ä–µ–≥–∏—Å—Ç—Ä.
    –ò—â–µ—Ç —Ö–æ–∫–∫—É –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö:
    1. –í –≤–∏–¥–µ 3 —Å—Ç—Ä–æ–∫ (—Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö \n), –ø—Ä–æ–≤–µ—Ä—è—è —Å—Ç—Ä–æ–≥–æ–µ –∏ –≥–∏–±–∫–æ–µ 5-7-5.
    2. –í –≤–∏–¥–µ –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è—è –≥–∏–±–∫–æ–µ 5-7-5.
    """
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ö–æ–∫–∫—É: '{text[:30]}...'") # –î–æ–±–∞–≤–∏—Ç—å
    # === –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï 1: –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ ===
    if len(text) > 200:
        print("üìè –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º") # –î–æ–±–∞–≤–∏—Ç—å
        return False

    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    lines = text.splitlines()
    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    lines = [line.strip() for line in lines if line.strip()]
    print(f"üìù –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(lines)}") # –î–æ–±–∞–≤–∏—Ç—å

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞: –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫ 3, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ 3 —Å—Ç—Ä–æ–∫–∏ ===
    if len(lines) == 3:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å—Ö–µ–º–µ 3 —Å—Ç—Ä–æ–∫–∏") # –î–æ–±–∞–≤–∏—Ç—å
        try: # –î–æ–±–∞–≤–∏—Ç—å try-except
            first_line_syllables = sum(count_syllables(word) for word in re.findall(r'[–∞-—è–ê-–Ø—ë–Å]+', lines[0]))
            second_line_syllables = sum(count_syllables(word) for word in re.findall(r'[–∞-—è–ê-–Ø—ë–Å]+', lines[1]))
            third_line_syllables = sum(count_syllables(word) for word in re.findall(r'[–∞-—è–ê-–Ø—ë–Å]+', lines[2]))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Å–ª–æ–≥–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∞—Ö: {e}") # –î–æ–±–∞–≤–∏—Ç—å
            import traceback
            traceback.print_exc() # –ü–µ—á–∞—Ç–∞–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–∞ –æ—à–∏–±–∫–∏
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–≥–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 5-7-5
        if first_line_syllables == 5 and second_line_syllables == 7 and third_line_syllables == 5:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —á—ë—Ç–∫–æ–µ —Ö–æ–∫–∫—É –∏–∑ 3 —Å—Ç—Ä–æ–∫: {first_line_syllables}-{second_line_syllables}-{third_line_syllables}")
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–∏–±–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ +/- 1 —Å–ª–æ–≥
        if (abs(first_line_syllables - 5) <= 1 and
            abs(second_line_syllables - 7) <= 1 and
            abs(third_line_syllables - 5) <= 1):
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–∏–±–∫–æ–µ —Ö–æ–∫–∫—É –∏–∑ 3 —Å—Ç—Ä–æ–∫: {first_line_syllables}-{second_line_syllables}-{third_line_syllables}")
            return True

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞: –ò—â–µ–º –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ–≤ (—Å—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º) ===
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –∞ –Ω–µ lines)
    words = re.findall(r'[–∞-—è–ê-–Ø—ë–Å]+', text)
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {len(words)}") # –î–æ–±–∞–≤–∏—Ç—å
    if len(words) < 3: # –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 3 —Å–ª–æ–≤–∞
        print("üìè –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è —Ö–æ–∫–∫—É") # –î–æ–±–∞–≤–∏—Ç—å
        return False

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
    syllables = [count_syllables(w) for w in words]
    n = len(syllables)
    print(f"üîç –ü–æ–¥—Å—á–∏—Ç–∞–Ω—ã —Å–ª–æ–≥–∏, –¥–ª–∏–Ω–∞: {n}") # –î–æ–±–∞–≤–∏—Ç—å

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ö–æ–∫–∫—É
    for start in range(n):
        total_syllables = 0
        # –ò—â–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å (–ø—Ä–∏–º–µ—Ä–Ω–æ 5 —Å–ª–æ–≥–æ–≤)
        i = start
        while i < n and total_syllables < 6:
            total_syllables += syllables[i]
            i += 1
        # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –∏–ª–∏ –¥–ª–∏–Ω–Ω–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if total_syllables < 4 or total_syllables > 6:
            continue

        first_part_end = i - 1
        first_part_syllables = total_syllables

        # –ò—â–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å (–ø—Ä–∏–º–µ—Ä–Ω–æ 7 —Å–ª–æ–≥–æ–≤)
        total_syllables = 0
        j = i
        while j < n and total_syllables < 8:
            total_syllables += syllables[j]
            j += 1
        # –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –∏–ª–∏ –¥–ª–∏–Ω–Ω–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if total_syllables < 6 or total_syllables > 8:
            continue

        second_part_end = j - 1
        second_part_syllables = total_syllables

        # –ò—â–µ–º —Ç—Ä–µ—Ç—å—é —á–∞—Å—Ç—å (–ø—Ä–∏–º–µ—Ä–Ω–æ 5 —Å–ª–æ–≥–æ–≤)
        total_syllables = 0
        k = j
        while k < n and total_syllables < 6:
            total_syllables += syllables[k]
            k += 1
        # –ï—Å–ª–∏ —Ç—Ä–µ—Ç—å—è —á–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –∏–ª–∏ –¥–ª–∏–Ω–Ω–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if total_syllables < 4 or total_syllables > 6:
            continue

        third_part_syllables = total_syllables

        # === –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï 2: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ö–æ–∫–∫—É ===
        total_words_in_haiku = (first_part_end - start + 1) + (second_part_end - i + 1) + (k - j)
        if total_words_in_haiku > 15:
            continue

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ö–æ–∫–∫—É –≤ –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {first_part_syllables}-{second_part_syllables}-{third_part_syllables} —Å–ª–æ–≥–æ–≤, {total_words_in_haiku} —Å–ª–æ–≤")
        return True

    print("‚ùå –•–æ–∫–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ") # –î–æ–±–∞–≤–∏—Ç—å
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤
    return False

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"üîÑ handle_message –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {update.effective_message.from_user.first_name if update.effective_message.from_user else 'Unknown'}") # –î–æ–±–∞–≤–∏—Ç—å
    msg = update.effective_message
    if msg and msg.text:
        print(f"üìÑ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {msg.text}") # –î–æ–±–∞–≤–∏—Ç—å
        if is_haiku(msg.text):
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ö–æ–∫–∫—É –æ—Ç {msg.from_user.first_name if msg.from_user else 'Unknown'}: {msg.text[:50]}...") # –£–±—Ä–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            await msg.reply_text(random.choice(HAiku_RESPONSES))
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç") # –î–æ–±–∞–≤–∏—Ç—å
        else:
            print("‚ùå –•–æ–∫–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ") # –î–æ–±–∞–≤–∏—Ç—å
    else:
        print("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è") # –î–æ–±–∞–≤–∏—Ç—å

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = Flask(__name__)

@app.route(WEBHOOK_PATH, methods=["POST"])
def telegram_webhook():
    print("üîÑ [DEBUG] –ù–ê–ß–ê–õ–û telegram_webhook") # –ù–æ–≤—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–Ω—Ç –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
    try: # –û–±–µ—Ä–Ω—ë–º –≤–µ—Å—å —Ä–æ—É—Ç –≤ try-except
        print("üîÑ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
        if request.headers.get("content-type") == "application/json":
            json_data = request.get_json()
            print(f"üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {json_data}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º application.bot, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–ø–µ—Ä—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
            # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ —Å—Ç–∞–ª–æ –ª–∏ –æ–Ω–æ None –≤–¥—Ä—É–≥
            if application is None or application.bot is None:
                 print("‚ùå [CRITICAL] application –∏–ª–∏ application.bot is None!")
                 return "Internal Server Error", 500
            update = Update.de_json(json_data, application.bot)
            print(f"üìã –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç Update: {update.effective_message.text if update.effective_message else 'No text'}")

            # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ
            coro = application.process_update(update)
            print("üìã –°–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            future = asyncio.run_coroutine_threadsafe(coro, main_loop)
            print("üìã –ö–æ—Ä—É—Ç–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π")
            try:
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –∏ –Ω–µ –∂–¥–∞—Ç—å, –Ω–æ 200 –±—ã—Å—Ç—Ä–µ–µ –≤–µ—Ä–Ω–µ—Ç—Å—è)
                result = future.result(timeout=10) # –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            except asyncio.TimeoutError:
                print("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç.")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                import traceback
                traceback.print_exc() # –ü–µ—á–∞—Ç–∞–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–∞ –æ—à–∏–±–∫–∏

            return "OK", 200
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            return "Invalid content type", 400
    except Exception as e:
        print(f"‚ùå [CRITICAL] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ telegram_webhook: {e}")
        import traceback
        traceback.print_exc()
        return "Internal Server Error", 500

@app.route("/", methods=["GET"])
def health_check():
    return "‚úÖ –ë–æ—Ç –∂–∏–≤! Webhook –∞–∫—Ç–∏–≤–µ–Ω.", 200

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ===
async def initialize_application():
    global application, main_loop
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π (–æ—Å–Ω–æ–≤–Ω–æ–π)
    main_loop = asyncio.get_running_loop()
    print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—É—á–µ–Ω –≤ –ø–æ—Ç–æ–∫–µ {threading.current_thread().name}.")

    print(f"‚úÖ –°–æ–∑–¥–∞—é –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é Telegram Application...")
    application = PTBApplication.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    print(f"‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook –Ω–∞ URL: {WEBHOOK_URL}")
    await application.bot.set_webhook(url=WEBHOOK_URL)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—Å–æ–∑–¥–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã, –≤–∫–ª—é—á–∞—è HTTP-–∫–ª–∏–µ–Ω—Ç)
    await application.initialize()
    print(f"‚úÖ Telegram Application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏ webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é Telegram Application...")
    loop.run_until_complete(initialize_application())
    print("‚úÖ Telegram Application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—Å —Ç–µ–º –∂–µ —Ü–∏–∫–ª–æ–º)
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é Flask-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
    app.run(host="0.0.0.0", port=PORT, use_reloader=False, debug=False)
