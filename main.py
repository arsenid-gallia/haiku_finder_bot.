import os
import re
import random
import asyncio
import threading
from concurrent.futures import ThreadPoolExecutor
from flask import Flask, request
from telegram import Update
from telegram.ext import Application as PTBApplication, MessageHandler, filters, ContextTypes

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.environ["BOT_TOKEN"]
WEBHOOK_PATH = "/webhook"
PORT = int(os.environ.get("PORT", 10000))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
if not WEBHOOK_URL:
    raise ValueError("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Environment Variables.")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è PTB –∏ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
application = None
main_loop = None # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞

# === –û–¢–í–ï–¢–´ –ù–ê –•–û–ö–ö–£ ===
HAiku_RESPONSES = [
    "–Ω–∏—Ñ–∏–≥–∞ —Ç—ã —Å–∞–º—É—Ä–∞–π",
    "–≤–æ—Ç —ç—Ç–æ —Ö–æ–∫–∫—É!",
    "—Ç—ã –ø–æ—ç—Ç, –±—Ä–∞—Ç–∏—à–∫–∞",
    "—Å–∞–∫—É—Ä–∞ —Ä–∞—Å—Ü–≤–µ–ª–∞ –≤ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤–∞—Ö",
    "–¥–∞–∂–µ —Ü–∏–∫–∞–¥–∞ –∑–∞–º–æ–ª—á–∞–ª–∞"
]

# === –ü–û–î–°–ß–Å–¢ –°–õ–û–ì–û–í (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π) ===
def count_syllables(word):
    word = word.lower()
    vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è"
    count = 0
    prev_vowel = False
    for ch in word:
        is_vowel = ch in vowels
        if is_vowel and not prev_vowel:
            count += 1
        prev_vowel = is_vowel
    return max(1, count)

# === –ü–û–ò–°–ö –•–û–ö–ö–£ –í –õ–Æ–ë–û–ú –§–û–†–ú–ê–¢–ï ===
def is_haiku(text):
    words = re.findall(r'[–∞-—è–ê-–Ø—ë–Å]+', text)
    if len(words) < 3:
        return False

    syllables = [count_syllables(w) for w in words]
    n = len(syllables)

    for i in range(n):
        s1, j = 0, i
        while j < n and s1 < 5:
            s1 += syllables[j]
            j += 1
        if s1 != 5:
            continue

        s2, k = 0, j
        while k < n and s2 < 7:
            s2 += syllables[k]
            k += 1
        if s2 != 7:
            continue

        s3, l = 0, k
        while l < n and s3 < 5:
            s3 += syllables[l]
            l += 1
        if s3 == 5:
            return True
    return False

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if msg and msg.text and is_haiku(msg.text):
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ö–æ–∫–∫—É –æ—Ç {msg.from_user.first_name if msg.from_user else 'Unknown'}: {msg.text[:50]}...")
        await msg.reply_text(random.choice(HAiku_RESPONSES))

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = Flask(__name__)

@app.route(WEBHOOK_PATH, methods=["POST"])
def telegram_webhook():
    if request.headers.get("content-type") == "application/json":
        json_data = request.get_json()
        update = Update.de_json(json_data, application.bot)

        # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ
        coro = application.process_update(update)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        # run_coroutine_threadsafe –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Future
        future = asyncio.run_coroutine_threadsafe(coro, main_loop)
        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –∏ –Ω–µ –∂–¥–∞—Ç—å, –Ω–æ 200 –±—ã—Å—Ç—Ä–µ–µ –≤–µ—Ä–Ω–µ—Ç—Å—è)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å –Ω–µ –≤–∏—Å–µ–ª –≤–µ—á–Ω–æ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            future.result(timeout=10) # –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
        except asyncio.TimeoutError:
            print("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

        return "OK", 200
    else:
        return "Invalid content type", 400

@app.route("/", methods=["GET"])
def health_check():
    return "‚úÖ –ë–æ—Ç –∂–∏–≤! Webhook –∞–∫—Ç–∏–≤–µ–Ω.", 200

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ ===
async def setup_and_run():
    global application, main_loop
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π (–æ—Å–Ω–æ–≤–Ω–æ–π)
    main_loop = asyncio.get_running_loop()
    print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—É—á–µ–Ω –≤ –ø–æ—Ç–æ–∫–µ {threading.current_thread().name}.")

    print(f"‚úÖ –°–æ–∑–¥–∞—é –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é Telegram Application...")
    application = PTBApplication.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    print(f"‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook –Ω–∞ URL: {WEBHOOK_URL}")
    await application.bot.set_webhook(url=WEBHOOK_URL)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—Å–æ–∑–¥–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã, –≤–∫–ª—é—á–∞—è HTTP-–∫–ª–∏–µ–Ω—Ç)
    await application.initialize()
    print(f"‚úÖ Telegram Application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏ webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    import threading
    def run_flask():
        app.run(host="0.0.0.0", port=PORT, use_reloader=False, debug=False)

    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é Flask-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    print(f"‚úÖ Flask-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ {flask_thread.name}.")

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª asyncio –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è
    try:
        while True:
            await asyncio.sleep(3600) # –°–ø–∏—Ç 1 —á–∞—Å
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å...")
    finally:
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Telegram Application...")
        await application.shutdown()
        print("‚úÖ Telegram Application –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    asyncio.run(setup_and_run())
