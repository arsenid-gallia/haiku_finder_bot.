import os
import re
import random
import asyncio
from concurrent.futures import ThreadPoolExecutor
from flask import Flask, request
from telegram import Update
from telegram.ext import Application as PTBApplication, MessageHandler, filters, ContextTypes

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.environ["BOT_TOKEN"]
WEBHOOK_PATH = "/webhook"
PORT = int(os.environ.get("PORT", 10000))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
if not WEBHOOK_URL:
    raise ValueError("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Environment Variables.")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è PTB
application = None

# === –û–¢–í–ï–¢–´ –ù–ê –•–û–ö–ö–£ ===
HAiku_RESPONSES = [
    "–Ω–∏—Ñ–∏–≥–∞ —Ç—ã —Å–∞–º—É—Ä–∞–π",
    "–≤–æ—Ç —ç—Ç–æ —Ö–æ–∫–∫—É!",
    "—Ç—ã –ø–æ—ç—Ç, –±—Ä–∞—Ç–∏—à–∫–∞",
    "—Å–∞–∫—É—Ä–∞ —Ä–∞—Å—Ü–≤–µ–ª–∞ –≤ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤–∞—Ö",
    "–¥–∞–∂–µ —Ü–∏–∫–∞–¥–∞ –∑–∞–º–æ–ª—á–∞–ª–∞"
]

# === –ü–û–î–°–ß–Å–¢ –°–õ–û–ì–û–í (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π) ===
def count_syllables(word):
    word = word.lower()
    vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è"
    count = 0
    prev_vowel = False
    for ch in word:
        is_vowel = ch in vowels
        if is_vowel and not prev_vowel:
            count += 1
        prev_vowel = is_vowel
    return max(1, count)

# === –ü–û–ò–°–ö –•–û–ö–ö–£ –í –õ–Æ–ë–û–ú –§–û–†–ú–ê–¢–ï ===
def is_haiku(text):
    words = re.findall(r'[–∞-—è–ê-–Ø—ë–Å]+', text)
    if len(words) < 3:
        return False

    syllables = [count_syllables(w) for w in words]
    n = len(syllables)

    for i in range(n):
        s1, j = 0, i
        while j < n and s1 < 5:
            s1 += syllables[j]
            j += 1
        if s1 != 5:
            continue

        s2, k = 0, j
        while k < n and s2 < 7:
            s2 += syllables[k]
            k += 1
        if s2 != 7:
            continue

        s3, l = 0, k
        while l < n and s3 < 5:
            s3 += syllables[l]
            l += 1
        if s3 == 5:
            return True
    return False

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if msg and msg.text and is_haiku(msg.text):
        await msg.reply_text(random.choice(HAiku_RESPONSES))

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = Flask(__name__)

@app.route(WEBHOOK_PATH, methods=["POST"])
def telegram_webhook():
    if request.headers.get("content-type") == "application/json":
        json_data = request.get_json()
        update = Update.de_json(json_data, application.bot)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–æ—É—Ç–µ
        # –≠—Ç–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ, —á–µ–º –≤—ã–∑–æ–≤ asyncio.run() –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: —Å–¥–µ–ª–∞—Ç—å —Ä–æ—É—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —Å –ø–æ–º–æ—â—å—é Quart, –Ω–æ Flask + ThreadPoolExecutor –ø—Ä–æ—â–µ
        # asyncio.run(application.process_update(update)) # –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑-–∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º process_update
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Ö–æ—Ç—è –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
        # asyncio.run –≤–Ω—É—Ç—Ä–∏ Flask-—Ä–æ—É—Ç–∞ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ü–∏–∫–ª, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –Ω–µ–º –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
        # –†–µ—à–µ–Ω–∏–µ: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ –∑–∞–ø—É—Å–∫–∞ Flask

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤ (–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, —ç—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª asyncio –≤ –ø–æ—Ç–æ–∫–µ)
        # –≠—Ç–æ –º–µ–Ω–µ–µ –∏–¥–µ–∞–ª—å–Ω–æ, —á–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ü–∏–∫–ª, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ Flask
        def run_async_process_update():
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª asyncio –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(application.process_update(update))
            finally:
                loop.close()

        # –°–æ–∑–¥–∞–µ–º ThreadPoolExecutor –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–π, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω, –∏ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ –ø—É–ª–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑
        with ThreadPoolExecutor(max_workers=1) as executor: # –ü—É–ª –Ω–∞ 1 –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ
            future = executor.submit(run_async_process_update)
            future.result() # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –∏ –Ω–µ –∂–¥–∞—Ç—å, –Ω–æ 200 –±—ã—Å—Ç—Ä–µ–µ –≤–µ—Ä–Ω–µ—Ç—Å—è)

        return "OK", 200
    else:
        return "Invalid content type", 400

@app.route("/", methods=["GET"])
def health_check():
    return "‚úÖ –ë–æ—Ç –∂–∏–≤! Webhook –∞–∫—Ç–∏–≤–µ–Ω.", 200

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ ===
async def setup_and_run():
    global application
    print(f"‚úÖ –°–æ–∑–¥–∞—é –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é Telegram Application...")
    application = PTBApplication.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    print(f"‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook –Ω–∞ URL: {WEBHOOK_URL}")
    await application.bot.set_webhook(url=WEBHOOK_URL)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—Å–æ–∑–¥–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã)
    await application.initialize()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ –¥–ª—è polling, –Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–∂–Ω–∞ –∏ –¥–ª—è webhook)
    # await application.start() # –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è webhook, start/stop –Ω—É–∂–Ω—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –µ—Å—Ç—å

    print(f"‚úÖ Telegram Application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏ webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º threading –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å asyncio
    import threading
    def run_flask():
        app.run(host="0.0.0.0", port=PORT, use_reloader=False, debug=False) # use_reloader=False –≤–∞–∂–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞

    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é Flask-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
    flask_thread.start()
    print(f"‚úÖ Flask-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.")

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª asyncio –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è
    # –í –ø—Ä–æ—Å—Ç–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∂–¥–∞—Ç—å, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
    try:
        while True:
            await asyncio.sleep(3600) # –°–ø–∏—Ç 1 —á–∞—Å, –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ —Å–ø–∏—Ç, —á—Ç–æ–±—ã —Ü–∏–∫–ª –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å...")
    finally:
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Telegram Application...")
        # await application.stop() # –ï—Å–ª–∏ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞—á–∏
        await application.shutdown()
        print("‚úÖ Telegram Application –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞
    asyncio.run(setup_and_run())
